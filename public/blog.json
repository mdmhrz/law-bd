[
    {
        "question": "What is useState and how does it work in React?",
        "answer": "The `useState` hook is a built-in React hook that allows you to add state to functional components. It returns a stateful value and a function to update it. When the state is updated using the setter function, the component re-renders to reflect the new state.",
        "date": "2024-11-19"
    },
    {
        "question": "What is the purpose of useEffect in React?",
        "answer": "`useEffect` is a React hook used for handling side effects in functional components. Examples of side effects include data fetching, setting up subscriptions, or manually changing the DOM. The hook takes a function as an argument and can also take a dependency array to control when the effect runs.",
        "date": "2025-02-07"
    },
    {
        "question": "What is a custom hook in React and when should you use one?",
        "answer": "A custom hook is a reusable function that starts with the word 'use' and allows you to extract and reuse logic involving hooks (like `useState`, `useEffect`, etc.) across multiple components. You should use a custom hook when you have logic that is shared between components to keep your code DRY and more maintainable.",
        "date": "2024-08-23"
    },
    {
        "question": "Difference between controlled and uncontrolled components. Which one is better?",
        "answer": "Controlled components are form elements where the form data is handled by the React component via state. Uncontrolled components store their own state internally and are accessed using refs. Controlled components offer better control and validation, making them the preferred choice in most cases, especially for complex forms.",
        "date": "2025-01-12"
    },
    {
        "question": "Tell us something about useFormStatus() in React.",
        "answer": "`useFormStatus()` is a React hook (specific to React Server Components and React's new form APIs) used to track the status of a form submission. It provides useful status information like `pending`, `success`, or `error`, enabling developers to show loading indicators or messages based on the formâ€™s state.",
        "date": "2024-10-02"
    }
]